;;;; cl-scrypt.lisp

(in-package :cl-scrypt)

(defun derive-keys (N r p salt passphrase)
 (let* ((kdf (ironclad:make-kdf 'ironclad:scrypt-kdf :N N :r r :p p))
        (digest (ironclad:derive-key kdf passphrase salt 1 64)))
  (values
   (subseq digest 0 32)
   (subseq digest 32 64))))

(defun slurp-scrypt-file (file-name)
 (with-open-file (in file-name :direction :input :element-type '(unsigned-byte 8))
  (let ((seq (make-array (file-length in) :element-type (stream-element-type in))))
   (read-sequence seq in)
   seq)))

(defun make-scrypt-header (N r p salt key-hmac)
 (let ((header (make-array 96 :element-type '(unsigned-byte 8)))
       (hmac (ironclad:make-hmac key-hmac 'ironclad:SHA256)))
  (replace header (ironclad:ascii-string-to-byte-array "scrypt"))
  (setf (aref header 6) 0)
  (setf (aref header 7) (truncate (log N 2)))
  (setf (ironclad:ub32ref/be header 8) r)
  (setf (ironclad:ub32ref/be header 12) p)
  (replace header salt :start1 16 :end1 48)
  (replace header (ironclad:digest-sequence 'ironclad:SHA256 header :start 0 :end 48) :start1 48 :end1 64)
  (ironclad:update-hmac hmac header :start 0 :end 64)
  (replace header (ironclad:hmac-digest hmac) :start1 64 :end1 96)
  header))

(defun parse-scrypt-header (header)
 (let ((N (ash 1 (aref header 7)))
       (r (ironclad:ub32ref/be header 8))
       (p (ironclad:ub32ref/be header 12))
       (salt (subseq header 16 48))
       (hash (subseq header 48 64)))
  (when (equalp hash (subseq (ironclad:digest-sequence 'ironclad:SHA256 header :start 0 :end 48) 0 16))
      (list N r p salt))))

(defun verify-scrypt-header (header key-hmac)
 (let ((mac (subseq header 64 96))
       (hmac (ironclad:make-hmac key-hmac 'ironclad:SHA256)))
  (ironclad:update-hmac hmac header :start 0 :end 64)
  (equalp mac (ironclad:hmac-digest hmac))))

(defun decrypt-file (file-name passphrase out-stream)
 (let ((byte-passphrase (ironclad:ascii-string-to-byte-array passphrase))
       (file-contents (slurp-scrypt-file file-name)))
  (destructuring-bind (N r p salt)
   (parse-scrypt-header file-contents)
   (multiple-value-bind (key-enc key-hmac)
    (derive-keys N r p salt byte-passphrase)
    (when (verify-scrypt-header file-contents key-hmac)
      (let ((mac (ironclad:make-hmac key-hmac 'ironclad:SHA256))
            (enc (ironclad:make-cipher 'ironclad:AES :key key-enc :mode 'ironclad:CTR :initialization-vector (make-array (ironclad:block-length 'ironclad:aes) :element-type '(unsigned-byte 8)))))
       (ironclad:update-hmac mac file-contents :start 0 :end (- (length file-contents) 32))
       (ironclad:decrypt-in-place enc file-contents :start 96 :end (- (length file-contents) 32))
       (write-sequence file-contents out-stream :start 96 :end (- (length file-contents) 32))
       (equalp (subseq file-contents (- (length file-contents) 32)) (ironclad:hmac-digest mac))))))))

(defun encrypt-file (file-name passphrase out-stream)
 (let ((salt (ironclad:make-random-salt 32))
       (file-contents (slurp-scrypt-file file-name)))
  (multiple-value-bind (key-enc key-hmac)
   (derive-keys 16384 8 1 salt (ironclad:ascii-string-to-byte-array passphrase))
   (let ((header (make-scrypt-header 16384 8 1 salt key-hmac))
         (mac (ironclad:make-hmac key-hmac 'ironclad:SHA256))
         (enc (ironclad:make-cipher 'ironclad:AES :key key-enc :mode 'ironclad:CTR :initialization-vector (make-array (ironclad:block-length 'ironclad:aes) :element-type '(unsigned-byte 8)))))
    (ironclad:update-hmac mac header)
    (write-sequence header out-stream)
    (ironclad:encrypt-in-place enc file-contents :start 0 :end (length file-contents))
    (ironclad:update-hmac mac file-contents)
    (write-sequence file-contents out-stream)
    (write-sequence (ironclad:hmac-digest mac) out-stream))))
 t)

